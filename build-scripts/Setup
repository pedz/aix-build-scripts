#!/usr/bin/ksh
# Source by other scripts to set up environment variables

# PUBLIC_BASE is what will be used for ``prefix'' -- it is the base of where
# the new code will be installed.
PUBLIC_BASE=${PUBLIC_BASE:-/gsa/ausgsa/projects/r/ruby}
DEFAULT_PREFIX="${DEFAULT_PREFIX:=${PUBLIC_BASE}}"

# The default is to do an out of tree build but for those packages that
# can not do that, do: export build=src before sourcing this script.
#
# The basedir_bit defaults to the directory that we are currently in
# but can be overridden by settings basedir_bit before sourceing this
# script.  Usually exporting is good since scripts call other scripts
# which may call Setup back again.

# "work" is the parent of where these build scripts reside.  See "tree-diagram"
# of the layout of the work tree.

# We add the public_base/bin directory to our path.  It starts out empty but
# will have things added to it over time.
# PATH="${PUBLIC_BASE}/bin:${PUBLIC_BASE}/aixbin:${PATH}"
PATH="${PUBLIC_BASE}/bin:${PATH}"

# Called at the end of a script to get the return value as well as
# touch the done file if appropriate.
function script_done
{
    rc=$( tail -1 "${LOG}" )
    if [[ "${rc}" = "0" ]] ; then
	touch "${DONE}"
    fi
}

# Get all the base dirs set up
. BaseSetup

# The basename plus the bitness of the package
basedir_bit=${basedir_bit:-${curdir##*/}}
# The basename of the package
basedir=${basedir_bit%-??bit}
# Path to where the src for the package will be
src_dir="${src_dir_base}/${basedir}"

# We like out of tree builds but some packages can't do that.
# so if the current directory is the source directory, we make it
# the build directory too.
if [[ "$PWD" = "${src_dir_base}/${basedir_bit}" || "${build}" = "src" ]] ; then
    build_dir_base="${src_dir_base}"
else
    build_dir_base="${work}/build"
fi
build_dir="${build_dir_base}/${basedir_bit}"

# Path to the destination directory of the install during the
# packaging phase
dest_dir="${dest_dir_base}/${basedir_bit}"
# Path to where we keep the log files
log_dir="${log_dir_base}/${basedir_bit}"
# Path to log file
LOG="${log_dir}/${prog}"
# Path to "done" file
DONE="${log_dir}/${prog}.done"

# This will change once bash is in the ruby tree
if [[ -x "${PUBLIC_BASE}/bin/bash" ]]; then
    export CONFIG_SHELL="${PUBLIC_BASE}/bin/bash"
fi

# During bootstrap, gmake may not exist.
if [[ -x "${PUBLIC_BASE}/bin/make" ]] ; then
    MAKE="${PUBLIC_BASE}/bin/make"
elif [[ -x "${PUBLIC_BASE}/bin/gmake" ]] ; then
    MAKE="${PUBLIC_BASE}/bin/gmake"
else
    MAKE=/usr/bin/make
fi

if false ; then
  echo "full_prog=${full_prog}"
  echo "prog=${prog}"
  echo "build_scripts=${build_scripts}"
  echo "work=${work}"
  echo "curdir=${curdir}"
  echo "basedir_bit=${basedir_bit}"
  echo "basedir=${basedir}"
  echo "src_dir_base=${src_dir_base}"
  echo "src_dir=${src_dir}"
  echo "build_dir_base=${build_dir_base}"
  echo "build_dir=${build_dir}"
  echo "log_dir=${log_dir}"
  exit 1
fi
